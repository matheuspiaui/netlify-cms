"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.GlobalStyles = exports.reactSelectStyles = exports.effects = exports.transitions = exports.borders = exports.shadows = exports.buttons = exports.components = exports.lengths = exports.colors = exports.colorsRaw = exports.fonts = void 0;

var _react = _interopRequireDefault(require("react"));

var _core = require("@emotion/core");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; var ownKeys = Object.keys(source); if (typeof Object.getOwnPropertySymbols === 'function') { ownKeys = ownKeys.concat(Object.getOwnPropertySymbols(source).filter(function (sym) { return Object.getOwnPropertyDescriptor(source, sym).enumerable; })); } ownKeys.forEach(function (key) { _defineProperty(target, key, source[key]); }); } return target; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

/**
 * Font Stacks
 */
const fonts = {
  primary: `
    -apple-system,
    BlinkMacSystemFont,
    "Segoe UI",
    Roboto,
    Helvetica,
    Arial,
    sans-serif,
    "Apple Color Emoji",
    "Segoe UI Emoji",
    "Segoe UI Symbol"
  `,
  mono: `
    'SFMono-Regular',
    Consolas,
    "Liberation Mono",
    Menlo,
    Courier,
    monospace;
  `
};
/**
 * Theme Colors
 */

exports.fonts = fonts;
const colorsRaw = {
  white: '#fff',
  grayLight: '#eff0f4',
  gray: '#798291',
  grayDark: '#313d3e',
  blue: '#3a69c7',
  blueLight: '#e8f5fe',
  green: '#005614',
  greenLight: '#caef6f',
  brown: '#754e00',
  yellow: '#ffee9c',
  red: '#ff003b',
  redLight: '#fcefea',
  purple: '#70399f',
  purpleLight: '#f6d8ff',
  teal: '#17a2b8',
  tealLight: '#ddf5f9',
  verdin: '#14cc49',
  verdinClarin: '#e9faee'
};
exports.colorsRaw = colorsRaw;
const colors = {
  statusDraftText: colorsRaw.purple,
  statusDraftBackground: colorsRaw.purpleLight,
  statusReviewText: colorsRaw.Brown,
  statusReviewBackground: colorsRaw.yellow,
  statusReadyText: colorsRaw.green,
  statusReadyBackground: colorsRaw.greenLight,
  text: colorsRaw.gray,
  textLight: colorsRaw.white,
  textLead: colorsRaw.grayDark,
  background: '#f3f3f4',
  foreground: colorsRaw.white,
  active: colorsRaw.verdin,
  activeBackground: colorsRaw.verdinClarin,
  inactive: colorsRaw.gray,
  button: colorsRaw.verdin,
  buttonText: colorsRaw.white,
  inputBackground: colorsRaw.white,
  infoText: colorsRaw.verdin,
  infoBackground: colorsRaw.verdinClarin,
  successText: colorsRaw.green,
  successBackground: colorsRaw.greenLight,
  warnText: colorsRaw.brown,
  warnBackground: colorsRaw.yellow,
  errorText: colorsRaw.red,
  errorBackground: colorsRaw.redLight,
  textFieldBorder: '#dfdfe3',
  controlLabel: '#7a8291',
  checkerboardLight: '#f2f2f2',
  checkerboardDark: '#e6e6e6'
};
exports.colors = colors;
const lengths = {
  topBarHeight: '56px',
  inputPadding: '16px 20px',
  borderRadius: '5px',
  richTextEditorMinHeight: '300px',
  borderWidth: '2px',
  topCardWidth: '682px',
  pageMargin: '28px 18px',
  objectWidgetTopBarContainerPadding: '0 14px 14px'
};
exports.lengths = lengths;
const borders = {
  textField: `solid  ${lengths.borderWidth} ${colors.textFieldBorder}`
};
exports.borders = borders;
const transitions = {
  main: '.2s ease'
};
exports.transitions = transitions;
const shadows = {
  drop: process.env.NODE_ENV === "production" ? {
    name: "1048azx-drop",
    styles: "box-shadow:0 2px 4px 0 rgba(19,39,48,0.12);label:drop;"
  } : {
    name: "1048azx-drop",
    styles: "box-shadow:0 2px 4px 0 rgba(19,39,48,0.12);label:drop;",
    map: "/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */"
  },
  dropMain: process.env.NODE_ENV === "production" ? {
    name: "5wb486-dropMain",
    styles: "box-shadow:0 2px 6px 0 rgba(68,74,87,0.05),0 1px 3px 0 rgba(68,74,87,0.1);label:dropMain;"
  } : {
    name: "5wb486-dropMain",
    styles: "box-shadow:0 2px 6px 0 rgba(68,74,87,0.05),0 1px 3px 0 rgba(68,74,87,0.1);label:dropMain;",
    map: "/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */"
  },
  dropMiddle: process.env.NODE_ENV === "production" ? {
    name: "968vwo-dropMiddle",
    styles: "box-shadow:0 2px 6px 0 rgba(68,74,87,0.15),0 1px 3px 0 rgba(68,74,87,0.3);label:dropMiddle;"
  } : {
    name: "968vwo-dropMiddle",
    styles: "box-shadow:0 2px 6px 0 rgba(68,74,87,0.15),0 1px 3px 0 rgba(68,74,87,0.3);label:dropMiddle;",
    map: "/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */"
  },
  dropDeep: process.env.NODE_ENV === "production" ? {
    name: "1sg7m5i-dropDeep",
    styles: "box-shadow:0 4px 12px 0 rgba(68,74,87,0.15),0 1px 3px 0 rgba(68,74,87,0.25);label:dropDeep;"
  } : {
    name: "1sg7m5i-dropDeep",
    styles: "box-shadow:0 4px 12px 0 rgba(68,74,87,0.15),0 1px 3px 0 rgba(68,74,87,0.25);label:dropDeep;",
    map: "/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */"
  },
  inset: process.env.NODE_ENV === "production" ? {
    name: "1qqzxv-inset",
    styles: "box-shadow:inset 0 0 4px rgba(68,74,87,0.3);label:inset;"
  } : {
    name: "1qqzxv-inset",
    styles: "box-shadow:inset 0 0 4px rgba(68,74,87,0.3);label:inset;",
    map: "/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */"
  }
};
exports.shadows = shadows;
const gradients = {
  checkerboard: `
    linear-gradient(
      45deg,
      ${colors.checkerboardDark} 25%,
      transparent 25%,
      transparent 75%,
      ${colors.checkerboardDark} 75%,
      ${colors.checkerboardDark}
    )
  `
};
const effects = {
  checkerboard:
  /*#__PURE__*/
  (0, _core.css)("background-color:", colors.checkerboardLight, ";background-size:16px 16px;background-position:0 0,8px 8px;background-image:", gradients.checkerboard, ",", gradients.checkerboard, ";label:checkerboard;" + (process.env.NODE_ENV === "production" ? "" : "/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */"))
};
exports.effects = effects;
const badge = process.env.NODE_ENV === "production" ? {
  name: "1bvw0ad-badge",
  styles: "font-size:13px;line-height:1;label:badge;"
} : {
  name: "1bvw0ad-badge",
  styles: "font-size:13px;line-height:1;label:badge;",
  map: "/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */"
};
const backgroundBadge =
/*#__PURE__*/
(0, _core.css)(badge, ";display:block;border-radius:", lengths.borderRadius, ";padding:4px 10px;text-align:center;label:backgroundBadge;" + (process.env.NODE_ENV === "production" ? "" : "/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */"));
const textBadge =
/*#__PURE__*/
(0, _core.css)(badge, ";display:inline-block;font-weight:700;text-transform:uppercase;label:textBadge;" + (process.env.NODE_ENV === "production" ? "" : "/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */"));
const card =
/*#__PURE__*/
(0, _core.css)(shadows.dropMain, ";border-radius:5px;background-color:#fff;label:card;" + (process.env.NODE_ENV === "production" ? "" : "/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */"));
const buttons = {
  button:
  /*#__PURE__*/
  (0, _core.css)("border:0;border-radius:", lengths.borderRadius, ";cursor:pointer;label:button;" + (process.env.NODE_ENV === "production" ? "" : "/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */")),
  default:
  /*#__PURE__*/
  (0, _core.css)("height:36px;line-height:36px;font-weight:500;padding:0 15px;background-color:", colorsRaw.gray, ";color:", colorsRaw.white, ";label:default;" + (process.env.NODE_ENV === "production" ? "" : "/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */")),
  medium: process.env.NODE_ENV === "production" ? {
    name: "xdagg1-medium",
    styles: "height:27px;line-height:27px;font-size:12px;font-weight:600;border-radius:3px;padding:0 24px 0 14px;label:medium;"
  } : {
    name: "xdagg1-medium",
    styles: "height:27px;line-height:27px;font-size:12px;font-weight:600;border-radius:3px;padding:0 24px 0 14px;label:medium;",
    map: "/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */"
  },
  small: process.env.NODE_ENV === "production" ? {
    name: "tf40rb-small",
    styles: "height:23px;line-height:23px;label:small;"
  } : {
    name: "tf40rb-small",
    styles: "height:23px;line-height:23px;label:small;",
    map: "/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */"
  },
  gray:
  /*#__PURE__*/
  (0, _core.css)("background-color:", colors.button, ";color:", colors.buttonText, ";&:focus,&:hover{color:", colors.white, ";background-color:#555a65;}label:gray;" + (process.env.NODE_ENV === "production" ? "" : "/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */")),
  green:
  /*#__PURE__*/
  (0, _core.css)("background-color:#aae31f;color:", colorsRaw.green, ";label:green;" + (process.env.NODE_ENV === "production" ? "" : "/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */")),
  lightRed:
  /*#__PURE__*/
  (0, _core.css)("background-color:", colorsRaw.redLight, ";color:", colorsRaw.red, ";label:lightRed;" + (process.env.NODE_ENV === "production" ? "" : "/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */")),
  lightBlue:
  /*#__PURE__*/
  (0, _core.css)("background-color:", colorsRaw.blueLight, ";color:", colorsRaw.blue, ";label:lightBlue;" + (process.env.NODE_ENV === "production" ? "" : "/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */")),
  lightTeal:
  /*#__PURE__*/
  (0, _core.css)("background-color:", colorsRaw.tealLight, ";color:#1195aa;label:lightTeal;" + (process.env.NODE_ENV === "production" ? "" : "/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */")),
  teal:
  /*#__PURE__*/
  (0, _core.css)("background-color:", colorsRaw.teal, ";color:", colorsRaw.white, ";label:teal;" + (process.env.NODE_ENV === "production" ? "" : "/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9zdHlsZXMuanMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBOE5XIiwiZmlsZSI6Ii4uLy4uL3NyYy9zdHlsZXMuanMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgUmVhY3QgZnJvbSAncmVhY3QnO1xuaW1wb3J0IHsgY3NzLCBHbG9iYWwgfSBmcm9tICdAZW1vdGlvbi9jb3JlJztcblxuLyoqXG4gKiBGb250IFN0YWNrc1xuICovXG5jb25zdCBmb250cyA9IHtcbiAgcHJpbWFyeTogYFxuICAgIC1hcHBsZS1zeXN0ZW0sXG4gICAgQmxpbmtNYWNTeXN0ZW1Gb250LFxuICAgIFwiU2Vnb2UgVUlcIixcbiAgICBSb2JvdG8sXG4gICAgSGVsdmV0aWNhLFxuICAgIEFyaWFsLFxuICAgIHNhbnMtc2VyaWYsXG4gICAgXCJBcHBsZSBDb2xvciBFbW9qaVwiLFxuICAgIFwiU2Vnb2UgVUkgRW1vamlcIixcbiAgICBcIlNlZ29lIFVJIFN5bWJvbFwiXG4gIGAsXG4gIG1vbm86IGBcbiAgICAnU0ZNb25vLVJlZ3VsYXInLFxuICAgIENvbnNvbGFzLFxuICAgIFwiTGliZXJhdGlvbiBNb25vXCIsXG4gICAgTWVubG8sXG4gICAgQ291cmllcixcbiAgICBtb25vc3BhY2U7XG4gIGAsXG59O1xuXG4vKipcbiAqIFRoZW1lIENvbG9yc1xuICovXG5jb25zdCBjb2xvcnNSYXcgPSB7XG4gIHdoaXRlOiAnI2ZmZicsXG4gIGdyYXlMaWdodDogJyNlZmYwZjQnLFxuICBncmF5OiAnIzc5ODI5MScsXG4gIGdyYXlEYXJrOiAnIzMxM2QzZScsXG4gIGJsdWU6ICcjM2E2OWM3JyxcbiAgYmx1ZUxpZ2h0OiAnI2U4ZjVmZScsXG4gIGdyZWVuOiAnIzAwNTYxNCcsXG4gIGdyZWVuTGlnaHQ6ICcjY2FlZjZmJyxcbiAgYnJvd246ICcjNzU0ZTAwJyxcbiAgeWVsbG93OiAnI2ZmZWU5YycsXG4gIHJlZDogJyNmZjAwM2InLFxuICByZWRMaWdodDogJyNmY2VmZWEnLFxuICBwdXJwbGU6ICcjNzAzOTlmJyxcbiAgcHVycGxlTGlnaHQ6ICcjZjZkOGZmJyxcbiAgdGVhbDogJyMxN2EyYjgnLFxuICB0ZWFsTGlnaHQ6ICcjZGRmNWY5JyxcbiAgdmVyZGluOiAnIzE0Y2M0OScsXG4gIHZlcmRpbkNsYXJpbjogJyNlOWZhZWUnLFxufTtcblxuY29uc3QgY29sb3JzID0ge1xuICBzdGF0dXNEcmFmdFRleHQ6IGNvbG9yc1Jhdy5wdXJwbGUsXG4gIHN0YXR1c0RyYWZ0QmFja2dyb3VuZDogY29sb3JzUmF3LnB1cnBsZUxpZ2h0LFxuICBzdGF0dXNSZXZpZXdUZXh0OiBjb2xvcnNSYXcuQnJvd24sXG4gIHN0YXR1c1Jldmlld0JhY2tncm91bmQ6IGNvbG9yc1Jhdy55ZWxsb3csXG4gIHN0YXR1c1JlYWR5VGV4dDogY29sb3JzUmF3LmdyZWVuLFxuICBzdGF0dXNSZWFkeUJhY2tncm91bmQ6IGNvbG9yc1Jhdy5ncmVlbkxpZ2h0LFxuICB0ZXh0OiBjb2xvcnNSYXcuZ3JheSxcbiAgdGV4dExpZ2h0OiBjb2xvcnNSYXcud2hpdGUsXG4gIHRleHRMZWFkOiBjb2xvcnNSYXcuZ3JheURhcmssXG4gIGJhY2tncm91bmQ6ICcjZjNmM2Y0JyxcbiAgZm9yZWdyb3VuZDogY29sb3JzUmF3LndoaXRlLFxuICBhY3RpdmU6IGNvbG9yc1Jhdy52ZXJkaW4sXG4gIGFjdGl2ZUJhY2tncm91bmQ6IGNvbG9yc1Jhdy52ZXJkaW5DbGFyaW4sXG4gIGluYWN0aXZlOiBjb2xvcnNSYXcuZ3JheSxcbiAgYnV0dG9uOiBjb2xvcnNSYXcudmVyZGluLFxuICBidXR0b25UZXh0OiBjb2xvcnNSYXcud2hpdGUsXG4gIGlucHV0QmFja2dyb3VuZDogY29sb3JzUmF3LndoaXRlLFxuICBpbmZvVGV4dDogY29sb3JzUmF3LnZlcmRpbixcbiAgaW5mb0JhY2tncm91bmQ6IGNvbG9yc1Jhdy52ZXJkaW5DbGFyaW4sXG4gIHN1Y2Nlc3NUZXh0OiBjb2xvcnNSYXcuZ3JlZW4sXG4gIHN1Y2Nlc3NCYWNrZ3JvdW5kOiBjb2xvcnNSYXcuZ3JlZW5MaWdodCxcbiAgd2FyblRleHQ6IGNvbG9yc1Jhdy5icm93bixcbiAgd2FybkJhY2tncm91bmQ6IGNvbG9yc1Jhdy55ZWxsb3csXG4gIGVycm9yVGV4dDogY29sb3JzUmF3LnJlZCxcbiAgZXJyb3JCYWNrZ3JvdW5kOiBjb2xvcnNSYXcucmVkTGlnaHQsXG4gIHRleHRGaWVsZEJvcmRlcjogJyNkZmRmZTMnLFxuICBjb250cm9sTGFiZWw6ICcjN2E4MjkxJyxcbiAgY2hlY2tlcmJvYXJkTGlnaHQ6ICcjZjJmMmYyJyxcbiAgY2hlY2tlcmJvYXJkRGFyazogJyNlNmU2ZTYnLFxufTtcblxuY29uc3QgbGVuZ3RocyA9IHtcbiAgdG9wQmFySGVpZ2h0OiAnNTZweCcsXG4gIGlucHV0UGFkZGluZzogJzE2cHggMjBweCcsXG4gIGJvcmRlclJhZGl1czogJzVweCcsXG4gIHJpY2hUZXh0RWRpdG9yTWluSGVpZ2h0OiAnMzAwcHgnLFxuICBib3JkZXJXaWR0aDogJzJweCcsXG4gIHRvcENhcmRXaWR0aDogJzY4MnB4JyxcbiAgcGFnZU1hcmdpbjogJzI4cHggMThweCcsXG4gIG9iamVjdFdpZGdldFRvcEJhckNvbnRhaW5lclBhZGRpbmc6ICcwIDE0cHggMTRweCcsXG59O1xuXG5jb25zdCBib3JkZXJzID0ge1xuICB0ZXh0RmllbGQ6IGBzb2xpZCAgJHtsZW5ndGhzLmJvcmRlcldpZHRofSAke2NvbG9ycy50ZXh0RmllbGRCb3JkZXJ9YCxcbn07XG5cbmNvbnN0IHRyYW5zaXRpb25zID0ge1xuICBtYWluOiAnLjJzIGVhc2UnLFxufTtcblxuY29uc3Qgc2hhZG93cyA9IHtcbiAgZHJvcDogY3NzYFxuICAgIGJveC1zaGFkb3c6IDAgMnB4IDRweCAwIHJnYmEoMTksIDM5LCA0OCwgMC4xMik7XG4gIGAsXG4gIGRyb3BNYWluOiBjc3NgXG4gICAgYm94LXNoYWRvdzogMCAycHggNnB4IDAgcmdiYSg2OCwgNzQsIDg3LCAwLjA1KSwgMCAxcHggM3B4IDAgcmdiYSg2OCwgNzQsIDg3LCAwLjEpO1xuICBgLFxuICBkcm9wTWlkZGxlOiBjc3NgXG4gICAgYm94LXNoYWRvdzogMCAycHggNnB4IDAgcmdiYSg2OCwgNzQsIDg3LCAwLjE1KSwgMCAxcHggM3B4IDAgcmdiYSg2OCwgNzQsIDg3LCAwLjMpO1xuICBgLFxuICBkcm9wRGVlcDogY3NzYFxuICAgIGJveC1zaGFkb3c6IDAgNHB4IDEycHggMCByZ2JhKDY4LCA3NCwgODcsIDAuMTUpLCAwIDFweCAzcHggMCByZ2JhKDY4LCA3NCwgODcsIDAuMjUpO1xuICBgLFxuICBpbnNldDogY3NzYFxuICAgIGJveC1zaGFkb3c6IGluc2V0IDAgMCA0cHggcmdiYSg2OCwgNzQsIDg3LCAwLjMpO1xuICBgLFxufTtcblxuY29uc3QgZ3JhZGllbnRzID0ge1xuICBjaGVja2VyYm9hcmQ6IGBcbiAgICBsaW5lYXItZ3JhZGllbnQoXG4gICAgICA0NWRlZyxcbiAgICAgICR7Y29sb3JzLmNoZWNrZXJib2FyZERhcmt9IDI1JSxcbiAgICAgIHRyYW5zcGFyZW50IDI1JSxcbiAgICAgIHRyYW5zcGFyZW50IDc1JSxcbiAgICAgICR7Y29sb3JzLmNoZWNrZXJib2FyZERhcmt9IDc1JSxcbiAgICAgICR7Y29sb3JzLmNoZWNrZXJib2FyZERhcmt9XG4gICAgKVxuICBgLFxufTtcblxuY29uc3QgZWZmZWN0cyA9IHtcbiAgY2hlY2tlcmJvYXJkOiBjc3NgXG4gICAgYmFja2dyb3VuZC1jb2xvcjogJHtjb2xvcnMuY2hlY2tlcmJvYXJkTGlnaHR9O1xuICAgIGJhY2tncm91bmQtc2l6ZTogMTZweCAxNnB4O1xuICAgIGJhY2tncm91bmQtcG9zaXRpb246IDAgMCwgOHB4IDhweDtcbiAgICBiYWNrZ3JvdW5kLWltYWdlOiAke2dyYWRpZW50cy5jaGVja2VyYm9hcmR9LCAke2dyYWRpZW50cy5jaGVja2VyYm9hcmR9O1xuICBgLFxufTtcblxuY29uc3QgYmFkZ2UgPSBjc3NgXG4gIGZvbnQtc2l6ZTogMTNweDtcbiAgbGluZS1oZWlnaHQ6IDE7XG5gO1xuXG5jb25zdCBiYWNrZ3JvdW5kQmFkZ2UgPSBjc3NgXG4gICR7YmFkZ2V9O1xuICBkaXNwbGF5OiBibG9jaztcbiAgYm9yZGVyLXJhZGl1czogJHtsZW5ndGhzLmJvcmRlclJhZGl1c307XG4gIHBhZGRpbmc6IDRweCAxMHB4O1xuICB0ZXh0LWFsaWduOiBjZW50ZXI7XG5gO1xuXG5jb25zdCB0ZXh0QmFkZ2UgPSBjc3NgXG4gICR7YmFkZ2V9O1xuICBkaXNwbGF5OiBpbmxpbmUtYmxvY2s7XG4gIGZvbnQtd2VpZ2h0OiA3MDA7XG4gIHRleHQtdHJhbnNmb3JtOiB1cHBlcmNhc2U7XG5gO1xuXG5jb25zdCBjYXJkID0gY3NzYFxuICAke3NoYWRvd3MuZHJvcE1haW59O1xuICBib3JkZXItcmFkaXVzOiA1cHg7XG4gIGJhY2tncm91bmQtY29sb3I6ICNmZmY7XG5gO1xuXG5jb25zdCBidXR0b25zID0ge1xuICBidXR0b246IGNzc2BcbiAgICBib3JkZXI6IDA7XG4gICAgYm9yZGVyLXJhZGl1czogJHtsZW5ndGhzLmJvcmRlclJhZGl1c307XG4gICAgY3Vyc29yOiBwb2ludGVyO1xuICBgLFxuICBkZWZhdWx0OiBjc3NgXG4gICAgaGVpZ2h0OiAzNnB4O1xuICAgIGxpbmUtaGVpZ2h0OiAzNnB4O1xuICAgIGZvbnQtd2VpZ2h0OiA1MDA7XG4gICAgcGFkZGluZzogMCAxNXB4O1xuICAgIGJhY2tncm91bmQtY29sb3I6ICR7Y29sb3JzUmF3LmdyYXl9O1xuICAgIGNvbG9yOiAke2NvbG9yc1Jhdy53aGl0ZX07XG4gIGAsXG4gIG1lZGl1bTogY3NzYFxuICAgIGhlaWdodDogMjdweDtcbiAgICBsaW5lLWhlaWdodDogMjdweDtcbiAgICBmb250LXNpemU6IDEycHg7XG4gICAgZm9udC13ZWlnaHQ6IDYwMDtcbiAgICBib3JkZXItcmFkaXVzOiAzcHg7XG4gICAgcGFkZGluZzogMCAyNHB4IDAgMTRweDtcbiAgYCxcbiAgc21hbGw6IGNzc2BcbiAgICBoZWlnaHQ6IDIzcHg7XG4gICAgbGluZS1oZWlnaHQ6IDIzcHg7XG4gIGAsXG4gIGdyYXk6IGNzc2BcbiAgICBiYWNrZ3JvdW5kLWNvbG9yOiAke2NvbG9ycy5idXR0b259O1xuICAgIGNvbG9yOiAke2NvbG9ycy5idXR0b25UZXh0fTtcblxuICAgICY6Zm9jdXMsXG4gICAgJjpob3ZlciB7XG4gICAgICBjb2xvcjogJHtjb2xvcnMud2hpdGV9O1xuICAgICAgYmFja2dyb3VuZC1jb2xvcjogIzU1NWE2NTtcbiAgICB9XG4gIGAsXG4gIGdyZWVuOiBjc3NgXG4gICAgYmFja2dyb3VuZC1jb2xvcjogI2FhZTMxZjtcbiAgICBjb2xvcjogJHtjb2xvcnNSYXcuZ3JlZW59O1xuICBgLFxuICBsaWdodFJlZDogY3NzYFxuICAgIGJhY2tncm91bmQtY29sb3I6ICR7Y29sb3JzUmF3LnJlZExpZ2h0fTtcbiAgICBjb2xvcjogJHtjb2xvcnNSYXcucmVkfTtcbiAgYCxcbiAgbGlnaHRCbHVlOiBjc3NgXG4gICAgYmFja2dyb3VuZC1jb2xvcjogJHtjb2xvcnNSYXcuYmx1ZUxpZ2h0fTtcbiAgICBjb2xvcjogJHtjb2xvcnNSYXcuYmx1ZX07XG4gIGAsXG4gIGxpZ2h0VGVhbDogY3NzYFxuICAgIGJhY2tncm91bmQtY29sb3I6ICR7Y29sb3JzUmF3LnRlYWxMaWdodH07XG4gICAgY29sb3I6ICMxMTk1YWE7XG4gIGAsXG4gIHRlYWw6IGNzc2BcbiAgICBiYWNrZ3JvdW5kLWNvbG9yOiAke2NvbG9yc1Jhdy50ZWFsfTtcbiAgICBjb2xvcjogJHtjb2xvcnNSYXcud2hpdGV9O1xuICBgLFxuICBkaXNhYmxlZDogY3NzYFxuICAgIGJhY2tncm91bmQtY29sb3I6ICR7Y29sb3JzUmF3LmdyYXlMaWdodH07XG4gICAgY29sb3I6ICR7Y29sb3JzUmF3LmdyYXl9O1xuICBgLFxufTtcblxuY29uc3QgY29tcG9uZW50cyA9IHtcbiAgY2FyZCxcbiAgY2FyZXREb3duOiBjc3NgXG4gICAgY29sb3I6ICR7Y29sb3JzUmF3LndoaXRlfTtcbiAgICB3aWR0aDogMDtcbiAgICBoZWlnaHQ6IDA7XG4gICAgYm9yZGVyLWxlZnQ6IDVweCBzb2xpZCB0cmFuc3BhcmVudDtcbiAgICBib3JkZXItcmlnaHQ6IDVweCBzb2xpZCB0cmFuc3BhcmVudDtcbiAgICBib3JkZXItdG9wOiA2cHggc29saWQgY3VycmVudENvbG9yO1xuICAgIGJvcmRlci1yYWRpdXM6IDJweDtcbiAgYCxcbiAgYmFkZ2U6IGNzc2BcbiAgICAke2JhY2tncm91bmRCYWRnZX07XG4gICAgY29sb3I6ICR7Y29sb3JzLmluZm9UZXh0fTtcbiAgICBiYWNrZ3JvdW5kLWNvbG9yOiAke2NvbG9ycy5pbmZvQmFja2dyb3VuZH07XG4gIGAsXG4gIGJhZGdlU3VjY2VzczogY3NzYFxuICAgICR7YmFja2dyb3VuZEJhZGdlfTtcbiAgICBjb2xvcjogJHtjb2xvcnMuc3VjY2Vzc1RleHR9O1xuICAgIGJhY2tncm91bmQtY29sb3I6ICR7Y29sb3JzLnN1Y2Nlc3NCYWNrZ3JvdW5kfTtcbiAgYCxcbiAgYmFkZ2VEYW5nZXI6IGNzc2BcbiAgICAke2JhY2tncm91bmRCYWRnZX07XG4gICAgY29sb3I6ICR7Y29sb3JzUmF3LnJlZH07XG4gICAgYmFja2dyb3VuZC1jb2xvcjogI2ZiZTBkNztcbiAgYCxcbiAgdGV4dEJhZGdlOiBjc3NgXG4gICAgJHt0ZXh0QmFkZ2V9O1xuICAgIGNvbG9yOiAke2NvbG9ycy5pbmZvVGV4dH07XG4gIGAsXG4gIHRleHRCYWRnZVN1Y2Nlc3M6IGNzc2BcbiAgICAke3RleHRCYWRnZX07XG4gICAgY29sb3I6ICR7Y29sb3JzLnN1Y2Nlc3NUZXh0fTtcbiAgYCxcbiAgdGV4dEJhZGdlRGFuZ2VyOiBjc3NgXG4gICAgJHt0ZXh0QmFkZ2V9O1xuICAgIGNvbG9yOiAke2NvbG9yc1Jhdy5yZWR9O1xuICBgLFxuICBsb2FkZXJTaXplOiBjc3NgXG4gICAgd2lkdGg6IDIuMjg1NzE0MjlyZW07XG4gICAgaGVpZ2h0OiAyLjI4NTcxNDI5cmVtO1xuICBgLFxuICBjYXJkVG9wOiBjc3NgXG4gICAgJHtjYXJkfTtcbiAgICB3aWR0aDogJHtsZW5ndGhzLnRvcENhcmRXaWR0aH07XG4gICAgbWF4LXdpZHRoOiAxMDAlO1xuICAgIHBhZGRpbmc6IDE4cHggMjBweDtcbiAgICBtYXJnaW4tYm90dG9tOiAyOHB4O1xuICBgLFxuICBjYXJkVG9wSGVhZGluZzogY3NzYFxuICAgIGZvbnQtc2l6ZTogMjJweDtcbiAgICBmb250LXdlaWdodDogNjAwO1xuICAgIGxpbmUtaGVpZ2h0OiAzN3B4O1xuICAgIG1hcmdpbjogMDtcbiAgICBwYWRkaW5nOiAwO1xuICBgLFxuICBjYXJkVG9wRGVzY3JpcHRpb246IGNzc2BcbiAgICBtYXgtd2lkdGg6IDQ4MHB4O1xuICAgIGNvbG9yOiAke2NvbG9ycy50ZXh0fTtcbiAgICBmb250LXNpemU6IDE0cHg7XG4gICAgbWFyZ2luLXRvcDogOHB4O1xuICBgLFxuICBvYmplY3RXaWRnZXRUb3BCYXJDb250YWluZXI6IGNzc2BcbiAgICBwYWRkaW5nOiAke2xlbmd0aHMub2JqZWN0V2lkZ2V0VG9wQmFyQ29udGFpbmVyUGFkZGluZ307XG4gIGAsXG4gIGRyb3Bkb3duTGlzdDogY3NzYFxuICAgICR7c2hhZG93cy5kcm9wRGVlcH07XG4gICAgYmFja2dyb3VuZC1jb2xvcjogJHtjb2xvcnNSYXcud2hpdGV9O1xuICAgIGJvcmRlci1yYWRpdXM6ICR7bGVuZ3Rocy5ib3JkZXJSYWRpdXN9O1xuICAgIG92ZXJmbG93OiBoaWRkZW47XG4gIGAsXG4gIGRyb3Bkb3duSXRlbTogY3NzYFxuICAgICR7YnV0dG9ucy5idXR0b259O1xuICAgIGJhY2tncm91bmQtY29sb3I6IHRyYW5zcGFyZW50O1xuICAgIGJvcmRlci1yYWRpdXM6IDA7XG4gICAgY29sb3I6ICR7Y29sb3JzUmF3LmdyYXl9O1xuICAgIGZvbnQtd2VpZ2h0OiA1MDA7XG4gICAgYm9yZGVyLWJvdHRvbTogMXB4IHNvbGlkICNlYWViZjE7XG4gICAgcGFkZGluZzogMTBweCAxNHB4O1xuICAgIGRpc3BsYXk6IGZsZXg7XG4gICAganVzdGlmeS1jb250ZW50OiBzcGFjZS1iZXR3ZWVuO1xuICAgIGFsaWduLWl0ZW1zOiBjZW50ZXI7XG5cbiAgICAmOmxhc3Qtb2YtdHlwZSB7XG4gICAgICBib3JkZXItYm90dG9tOiAwO1xuICAgIH1cblxuICAgICY6aG92ZXIsXG4gICAgJjphY3RpdmUsXG4gICAgJjpmb2N1cyB7XG4gICAgICBjb2xvcjogJHtjb2xvcnMuYWN0aXZlfTtcbiAgICAgIGJhY2tncm91bmQtY29sb3I6ICR7Y29sb3JzLmFjdGl2ZUJhY2tncm91bmR9O1xuICAgIH1cbiAgYCxcbn07XG5cbmNvbnN0IHJlYWN0U2VsZWN0U3R5bGVzID0ge1xuICBjb250cm9sOiBzdHlsZXMgPT4gKHtcbiAgICAuLi5zdHlsZXMsXG4gICAgYm9yZGVyOiAwLFxuICAgIGJveFNoYWRvdzogJ25vbmUnLFxuICAgIHBhZGRpbmc6ICc5cHggMCA5cHggMTJweCcsXG4gIH0pLFxuICBvcHRpb246IChzdHlsZXMsIHN0YXRlKSA9PiAoe1xuICAgIC4uLnN0eWxlcyxcbiAgICBiYWNrZ3JvdW5kQ29sb3I6IHN0YXRlLmlzU2VsZWN0ZWRcbiAgICAgID8gYCR7Y29sb3JzLmFjdGl2ZX1gXG4gICAgICA6IHN0YXRlLmlzRm9jdXNlZFxuICAgICAgPyBgJHtjb2xvcnMuYWN0aXZlQmFja2dyb3VuZH1gXG4gICAgICA6ICd0cmFuc3BhcmVudCcsXG4gICAgcGFkZGluZ0xlZnQ6ICcyMnB4JyxcbiAgfSksXG4gIG1lbnU6IHN0eWxlcyA9PiAoeyAuLi5zdHlsZXMsIHJpZ2h0OiAwLCB6SW5kZXg6IDIgfSksXG4gIGNvbnRhaW5lcjogc3R5bGVzID0+ICh7IC4uLnN0eWxlcywgcGFkZGluZzogJzAgIWltcG9ydGFudCcgfSksXG4gIGluZGljYXRvclNlcGFyYXRvcjogKHN0eWxlcywgc3RhdGUpID0+XG4gICAgc3RhdGUuaGFzVmFsdWUgJiYgc3RhdGUuc2VsZWN0UHJvcHMuaXNDbGVhcmFibGVcbiAgICAgID8geyAuLi5zdHlsZXMsIGJhY2tncm91bmRDb2xvcjogYCR7Y29sb3JzLnRleHRGaWVsZEJvcmRlcn1gIH1cbiAgICAgIDogeyBkaXNwbGF5OiAnbm9uZScgfSxcbiAgZHJvcGRvd25JbmRpY2F0b3I6IHN0eWxlcyA9PiAoeyAuLi5zdHlsZXMsIGNvbG9yOiBgJHtjb2xvcnMuY29udHJvbExhYmVsfWAgfSksXG4gIGNsZWFySW5kaWNhdG9yOiBzdHlsZXMgPT4gKHsgLi4uc3R5bGVzLCBjb2xvcjogYCR7Y29sb3JzLmNvbnRyb2xMYWJlbH1gIH0pLFxuICBtdWx0aVZhbHVlOiBzdHlsZXMgPT4gKHtcbiAgICAuLi5zdHlsZXMsXG4gICAgYmFja2dyb3VuZENvbG9yOiBjb2xvcnMuYmFja2dyb3VuZCxcbiAgfSksXG4gIG11bHRpVmFsdWVMYWJlbDogc3R5bGVzID0+ICh7XG4gICAgLi4uc3R5bGVzLFxuICAgIGNvbG9yOiBjb2xvcnMudGV4dExlYWQsXG4gICAgZm9udFdlaWdodDogNTAwLFxuICB9KSxcbiAgbXVsdGlWYWx1ZVJlbW92ZTogc3R5bGVzID0+ICh7XG4gICAgLi4uc3R5bGVzLFxuICAgIGNvbG9yOiBjb2xvcnMuY29udHJvbExhYmVsLFxuICAgICc6aG92ZXInOiB7XG4gICAgICBjb2xvcjogY29sb3JzLmVycm9yVGV4dCxcbiAgICAgIGJhY2tncm91bmRDb2xvcjogY29sb3JzLmVycm9yQmFja2dyb3VuZCxcbiAgICB9LFxuICB9KSxcbn07XG5cbmNvbnN0IEdsb2JhbFN0eWxlcyA9ICgpID0+IChcbiAgPEdsb2JhbFxuICAgIHN0eWxlcz17Y3NzYFxuICAgICAgKixcbiAgICAgICo6YmVmb3JlLFxuICAgICAgKjphZnRlciB7XG4gICAgICAgIGJveC1zaXppbmc6IGJvcmRlci1ib3g7XG4gICAgICB9XG5cbiAgICAgIDpmb2N1cyB7XG4gICAgICAgIG91dGxpbmU6IC13ZWJraXQtZm9jdXMtcmluZy1jb2xvciBhdXRvICR7bGVuZ3Rocy5ib3JkZXJSYWRpdXN9O1xuICAgICAgfVxuXG4gICAgICAvKipcbiAgICAgICAqIERvbid0IHNob3cgb3V0bGluZXMgaWYgdGhlIHVzZXIgaXMgdXRpbGl6aW5nIG1vdXNlIHJhdGhlciB0aGFuIGtleWJvYXJkLlxuICAgICAgICovXG4gICAgICBbZGF0YS13aGF0aW50ZW50PSdtb3VzZSddICo6Zm9jdXMge1xuICAgICAgICBvdXRsaW5lOiBub25lO1xuICAgICAgfVxuXG4gICAgICBpbnB1dCB7XG4gICAgICAgIGJvcmRlcjogMDtcbiAgICAgIH1cblxuICAgICAgYm9keSB7XG4gICAgICAgIGZvbnQtZmFtaWx5OiAke2ZvbnRzLnByaW1hcnl9O1xuICAgICAgICBmb250LXdlaWdodDogbm9ybWFsO1xuICAgICAgICBiYWNrZ3JvdW5kLWNvbG9yOiAke2NvbG9ycy5iYWNrZ3JvdW5kfTtcbiAgICAgICAgY29sb3I6ICR7Y29sb3JzLnRleHR9O1xuICAgICAgICBtYXJnaW46IDA7XG4gICAgICB9XG5cbiAgICAgIHVsLFxuICAgICAgb2wge1xuICAgICAgICBwYWRkaW5nLWxlZnQ6IDA7XG4gICAgICB9XG5cbiAgICAgIGgxLFxuICAgICAgaDIsXG4gICAgICBoMyxcbiAgICAgIGg0LFxuICAgICAgaDUsXG4gICAgICBoNixcbiAgICAgIHAge1xuICAgICAgICBmb250LWZhbWlseTogJHtmb250cy5wcmltYXJ5fTtcbiAgICAgICAgY29sb3I6ICR7Y29sb3JzLnRleHRMZWFkfTtcbiAgICAgICAgZm9udC1zaXplOiAxNXB4O1xuICAgICAgICBsaW5lLWhlaWdodDogMS41O1xuICAgICAgICBtYXJnaW4tdG9wOiAwO1xuICAgICAgfVxuXG4gICAgICBoMSxcbiAgICAgIGgyLFxuICAgICAgaDMsXG4gICAgICBoNCxcbiAgICAgIGg1LFxuICAgICAgaDYge1xuICAgICAgICBmb250LXdlaWdodDogNTAwO1xuICAgICAgfVxuXG4gICAgICBoMSB7XG4gICAgICAgIGZvbnQtc2l6ZTogMjRweDtcbiAgICAgICAgbGV0dGVyLXNwYWNpbmc6IDAuNHB4O1xuICAgICAgICBjb2xvcjogJHtjb2xvcnMudGV4dExlYWR9O1xuICAgICAgfVxuXG4gICAgICBhLFxuICAgICAgYnV0dG9uIHtcbiAgICAgICAgZm9udC1zaXplOiAxNHB4O1xuICAgICAgICBmb250LXdlaWdodDogNTAwO1xuICAgICAgfVxuXG4gICAgICBhIHtcbiAgICAgICAgY29sb3I6ICR7Y29sb3JzLnRleHR9O1xuICAgICAgICB0ZXh0LWRlY29yYXRpb246IG5vbmU7XG4gICAgICB9XG5cbiAgICAgIGltZyB7XG4gICAgICAgIG1heC13aWR0aDogMTAwJTtcbiAgICAgIH1cblxuICAgICAgdGV4dGFyZWEge1xuICAgICAgICByZXNpemU6IG5vbmU7XG4gICAgICB9XG4gICAgYH1cbiAgLz5cbik7XG5cbmV4cG9ydCB7XG4gIGZvbnRzLFxuICBjb2xvcnNSYXcsXG4gIGNvbG9ycyxcbiAgbGVuZ3RocyxcbiAgY29tcG9uZW50cyxcbiAgYnV0dG9ucyxcbiAgc2hhZG93cyxcbiAgYm9yZGVycyxcbiAgdHJhbnNpdGlvbnMsXG4gIGVmZmVjdHMsXG4gIHJlYWN0U2VsZWN0U3R5bGVzLFxuICBHbG9iYWxTdHlsZXMsXG59O1xuIl19 */")),
  disabled:
  /*#__PURE__*/
  (0, _core.css)("background-color:", colorsRaw.grayLight, ";color:", colorsRaw.gray, ";label:disabled;" + (process.env.NODE_ENV === "production" ? "" : "/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9zdHlsZXMuanMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBa09lIiwiZmlsZSI6Ii4uLy4uL3NyYy9zdHlsZXMuanMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgUmVhY3QgZnJvbSAncmVhY3QnO1xuaW1wb3J0IHsgY3NzLCBHbG9iYWwgfSBmcm9tICdAZW1vdGlvbi9jb3JlJztcblxuLyoqXG4gKiBGb250IFN0YWNrc1xuICovXG5jb25zdCBmb250cyA9IHtcbiAgcHJpbWFyeTogYFxuICAgIC1hcHBsZS1zeXN0ZW0sXG4gICAgQmxpbmtNYWNTeXN0ZW1Gb250LFxuICAgIFwiU2Vnb2UgVUlcIixcbiAgICBSb2JvdG8sXG4gICAgSGVsdmV0aWNhLFxuICAgIEFyaWFsLFxuICAgIHNhbnMtc2VyaWYsXG4gICAgXCJBcHBsZSBDb2xvciBFbW9qaVwiLFxuICAgIFwiU2Vnb2UgVUkgRW1vamlcIixcbiAgICBcIlNlZ29lIFVJIFN5bWJvbFwiXG4gIGAsXG4gIG1vbm86IGBcbiAgICAnU0ZNb25vLVJlZ3VsYXInLFxuICAgIENvbnNvbGFzLFxuICAgIFwiTGliZXJhdGlvbiBNb25vXCIsXG4gICAgTWVubG8sXG4gICAgQ291cmllcixcbiAgICBtb25vc3BhY2U7XG4gIGAsXG59O1xuXG4vKipcbiAqIFRoZW1lIENvbG9yc1xuICovXG5jb25zdCBjb2xvcnNSYXcgPSB7XG4gIHdoaXRlOiAnI2ZmZicsXG4gIGdyYXlMaWdodDogJyNlZmYwZjQnLFxuICBncmF5OiAnIzc5ODI5MScsXG4gIGdyYXlEYXJrOiAnIzMxM2QzZScsXG4gIGJsdWU6ICcjM2E2OWM3JyxcbiAgYmx1ZUxpZ2h0OiAnI2U4ZjVmZScsXG4gIGdyZWVuOiAnIzAwNTYxNCcsXG4gIGdyZWVuTGlnaHQ6ICcjY2FlZjZmJyxcbiAgYnJvd246ICcjNzU0ZTAwJyxcbiAgeWVsbG93OiAnI2ZmZWU5YycsXG4gIHJlZDogJyNmZjAwM2InLFxuICByZWRMaWdodDogJyNmY2VmZWEnLFxuICBwdXJwbGU6ICcjNzAzOTlmJyxcbiAgcHVycGxlTGlnaHQ6ICcjZjZkOGZmJyxcbiAgdGVhbDogJyMxN2EyYjgnLFxuICB0ZWFsTGlnaHQ6ICcjZGRmNWY5JyxcbiAgdmVyZGluOiAnIzE0Y2M0OScsXG4gIHZlcmRpbkNsYXJpbjogJyNlOWZhZWUnLFxufTtcblxuY29uc3QgY29sb3JzID0ge1xuICBzdGF0dXNEcmFmdFRleHQ6IGNvbG9yc1Jhdy5wdXJwbGUsXG4gIHN0YXR1c0RyYWZ0QmFja2dyb3VuZDogY29sb3JzUmF3LnB1cnBsZUxpZ2h0LFxuICBzdGF0dXNSZXZpZXdUZXh0OiBjb2xvcnNSYXcuQnJvd24sXG4gIHN0YXR1c1Jldmlld0JhY2tncm91bmQ6IGNvbG9yc1Jhdy55ZWxsb3csXG4gIHN0YXR1c1JlYWR5VGV4dDogY29sb3JzUmF3LmdyZWVuLFxuICBzdGF0dXNSZWFkeUJhY2tncm91bmQ6IGNvbG9yc1Jhdy5ncmVlbkxpZ2h0LFxuICB0ZXh0OiBjb2xvcnNSYXcuZ3JheSxcbiAgdGV4dExpZ2h0OiBjb2xvcnNSYXcud2hpdGUsXG4gIHRleHRMZWFkOiBjb2xvcnNSYXcuZ3JheURhcmssXG4gIGJhY2tncm91bmQ6ICcjZjNmM2Y0JyxcbiAgZm9yZWdyb3VuZDogY29sb3JzUmF3LndoaXRlLFxuICBhY3RpdmU6IGNvbG9yc1Jhdy52ZXJkaW4sXG4gIGFjdGl2ZUJhY2tncm91bmQ6IGNvbG9yc1Jhdy52ZXJkaW5DbGFyaW4sXG4gIGluYWN0aXZlOiBjb2xvcnNSYXcuZ3JheSxcbiAgYnV0dG9uOiBjb2xvcnNSYXcudmVyZGluLFxuICBidXR0b25UZXh0OiBjb2xvcnNSYXcud2hpdGUsXG4gIGlucHV0QmFja2dyb3VuZDogY29sb3JzUmF3LndoaXRlLFxuICBpbmZvVGV4dDogY29sb3JzUmF3LnZlcmRpbixcbiAgaW5mb0JhY2tncm91bmQ6IGNvbG9yc1Jhdy52ZXJkaW5DbGFyaW4sXG4gIHN1Y2Nlc3NUZXh0OiBjb2xvcnNSYXcuZ3JlZW4sXG4gIHN1Y2Nlc3NCYWNrZ3JvdW5kOiBjb2xvcnNSYXcuZ3JlZW5MaWdodCxcbiAgd2FyblRleHQ6IGNvbG9yc1Jhdy5icm93bixcbiAgd2FybkJhY2tncm91bmQ6IGNvbG9yc1Jhdy55ZWxsb3csXG4gIGVycm9yVGV4dDogY29sb3JzUmF3LnJlZCxcbiAgZXJyb3JCYWNrZ3JvdW5kOiBjb2xvcnNSYXcucmVkTGlnaHQsXG4gIHRleHRGaWVsZEJvcmRlcjogJyNkZmRmZTMnLFxuICBjb250cm9sTGFiZWw6ICcjN2E4MjkxJyxcbiAgY2hlY2tlcmJvYXJkTGlnaHQ6ICcjZjJmMmYyJyxcbiAgY2hlY2tlcmJvYXJkRGFyazogJyNlNmU2ZTYnLFxufTtcblxuY29uc3QgbGVuZ3RocyA9IHtcbiAgdG9wQmFySGVpZ2h0OiAnNTZweCcsXG4gIGlucHV0UGFkZGluZzogJzE2cHggMjBweCcsXG4gIGJvcmRlclJhZGl1czogJzVweCcsXG4gIHJpY2hUZXh0RWRpdG9yTWluSGVpZ2h0OiAnMzAwcHgnLFxuICBib3JkZXJXaWR0aDogJzJweCcsXG4gIHRvcENhcmRXaWR0aDogJzY4MnB4JyxcbiAgcGFnZU1hcmdpbjogJzI4cHggMThweCcsXG4gIG9iamVjdFdpZGdldFRvcEJhckNvbnRhaW5lclBhZGRpbmc6ICcwIDE0cHggMTRweCcsXG59O1xuXG5jb25zdCBib3JkZXJzID0ge1xuICB0ZXh0RmllbGQ6IGBzb2xpZCAgJHtsZW5ndGhzLmJvcmRlcldpZHRofSAke2NvbG9ycy50ZXh0RmllbGRCb3JkZXJ9YCxcbn07XG5cbmNvbnN0IHRyYW5zaXRpb25zID0ge1xuICBtYWluOiAnLjJzIGVhc2UnLFxufTtcblxuY29uc3Qgc2hhZG93cyA9IHtcbiAgZHJvcDogY3NzYFxuICAgIGJveC1zaGFkb3c6IDAgMnB4IDRweCAwIHJnYmEoMTksIDM5LCA0OCwgMC4xMik7XG4gIGAsXG4gIGRyb3BNYWluOiBjc3NgXG4gICAgYm94LXNoYWRvdzogMCAycHggNnB4IDAgcmdiYSg2OCwgNzQsIDg3LCAwLjA1KSwgMCAxcHggM3B4IDAgcmdiYSg2OCwgNzQsIDg3LCAwLjEpO1xuICBgLFxuICBkcm9wTWlkZGxlOiBjc3NgXG4gICAgYm94LXNoYWRvdzogMCAycHggNnB4IDAgcmdiYSg2OCwgNzQsIDg3LCAwLjE1KSwgMCAxcHggM3B4IDAgcmdiYSg2OCwgNzQsIDg3LCAwLjMpO1xuICBgLFxuICBkcm9wRGVlcDogY3NzYFxuICAgIGJveC1zaGFkb3c6IDAgNHB4IDEycHggMCByZ2JhKDY4LCA3NCwgODcsIDAuMTUpLCAwIDFweCAzcHggMCByZ2JhKDY4LCA3NCwgODcsIDAuMjUpO1xuICBgLFxuICBpbnNldDogY3NzYFxuICAgIGJveC1zaGFkb3c6IGluc2V0IDAgMCA0cHggcmdiYSg2OCwgNzQsIDg3LCAwLjMpO1xuICBgLFxufTtcblxuY29uc3QgZ3JhZGllbnRzID0ge1xuICBjaGVja2VyYm9hcmQ6IGBcbiAgICBsaW5lYXItZ3JhZGllbnQoXG4gICAgICA0NWRlZyxcbiAgICAgICR7Y29sb3JzLmNoZWNrZXJib2FyZERhcmt9IDI1JSxcbiAgICAgIHRyYW5zcGFyZW50IDI1JSxcbiAgICAgIHRyYW5zcGFyZW50IDc1JSxcbiAgICAgICR7Y29sb3JzLmNoZWNrZXJib2FyZERhcmt9IDc1JSxcbiAgICAgICR7Y29sb3JzLmNoZWNrZXJib2FyZERhcmt9XG4gICAgKVxuICBgLFxufTtcblxuY29uc3QgZWZmZWN0cyA9IHtcbiAgY2hlY2tlcmJvYXJkOiBjc3NgXG4gICAgYmFja2dyb3VuZC1jb2xvcjogJHtjb2xvcnMuY2hlY2tlcmJvYXJkTGlnaHR9O1xuICAgIGJhY2tncm91bmQtc2l6ZTogMTZweCAxNnB4O1xuICAgIGJhY2tncm91bmQtcG9zaXRpb246IDAgMCwgOHB4IDhweDtcbiAgICBiYWNrZ3JvdW5kLWltYWdlOiAke2dyYWRpZW50cy5jaGVja2VyYm9hcmR9LCAke2dyYWRpZW50cy5jaGVja2VyYm9hcmR9O1xuICBgLFxufTtcblxuY29uc3QgYmFkZ2UgPSBjc3NgXG4gIGZvbnQtc2l6ZTogMTNweDtcbiAgbGluZS1oZWlnaHQ6IDE7XG5gO1xuXG5jb25zdCBiYWNrZ3JvdW5kQmFkZ2UgPSBjc3NgXG4gICR7YmFkZ2V9O1xuICBkaXNwbGF5OiBibG9jaztcbiAgYm9yZGVyLXJhZGl1czogJHtsZW5ndGhzLmJvcmRlclJhZGl1c307XG4gIHBhZGRpbmc6IDRweCAxMHB4O1xuICB0ZXh0LWFsaWduOiBjZW50ZXI7XG5gO1xuXG5jb25zdCB0ZXh0QmFkZ2UgPSBjc3NgXG4gICR7YmFkZ2V9O1xuICBkaXNwbGF5OiBpbmxpbmUtYmxvY2s7XG4gIGZvbnQtd2VpZ2h0OiA3MDA7XG4gIHRleHQtdHJhbnNmb3JtOiB1cHBlcmNhc2U7XG5gO1xuXG5jb25zdCBjYXJkID0gY3NzYFxuICAke3NoYWRvd3MuZHJvcE1haW59O1xuICBib3JkZXItcmFkaXVzOiA1cHg7XG4gIGJhY2tncm91bmQtY29sb3I6ICNmZmY7XG5gO1xuXG5jb25zdCBidXR0b25zID0ge1xuICBidXR0b246IGNzc2BcbiAgICBib3JkZXI6IDA7XG4gICAgYm9yZGVyLXJhZGl1czogJHtsZW5ndGhzLmJvcmRlclJhZGl1c307XG4gICAgY3Vyc29yOiBwb2ludGVyO1xuICBgLFxuICBkZWZhdWx0OiBjc3NgXG4gICAgaGVpZ2h0OiAzNnB4O1xuICAgIGxpbmUtaGVpZ2h0OiAzNnB4O1xuICAgIGZvbnQtd2VpZ2h0OiA1MDA7XG4gICAgcGFkZGluZzogMCAxNXB4O1xuICAgIGJhY2tncm91bmQtY29sb3I6ICR7Y29sb3JzUmF3LmdyYXl9O1xuICAgIGNvbG9yOiAke2NvbG9yc1Jhdy53aGl0ZX07XG4gIGAsXG4gIG1lZGl1bTogY3NzYFxuICAgIGhlaWdodDogMjdweDtcbiAgICBsaW5lLWhlaWdodDogMjdweDtcbiAgICBmb250LXNpemU6IDEycHg7XG4gICAgZm9udC13ZWlnaHQ6IDYwMDtcbiAgICBib3JkZXItcmFkaXVzOiAzcHg7XG4gICAgcGFkZGluZzogMCAyNHB4IDAgMTRweDtcbiAgYCxcbiAgc21hbGw6IGNzc2BcbiAgICBoZWlnaHQ6IDIzcHg7XG4gICAgbGluZS1oZWlnaHQ6IDIzcHg7XG4gIGAsXG4gIGdyYXk6IGNzc2BcbiAgICBiYWNrZ3JvdW5kLWNvbG9yOiAke2NvbG9ycy5idXR0b259O1xuICAgIGNvbG9yOiAke2NvbG9ycy5idXR0b25UZXh0fTtcblxuICAgICY6Zm9jdXMsXG4gICAgJjpob3ZlciB7XG4gICAgICBjb2xvcjogJHtjb2xvcnMud2hpdGV9O1xuICAgICAgYmFja2dyb3VuZC1jb2xvcjogIzU1NWE2NTtcbiAgICB9XG4gIGAsXG4gIGdyZWVuOiBjc3NgXG4gICAgYmFja2dyb3VuZC1jb2xvcjogI2FhZTMxZjtcbiAgICBjb2xvcjogJHtjb2xvcnNSYXcuZ3JlZW59O1xuICBgLFxuICBsaWdodFJlZDogY3NzYFxuICAgIGJhY2tncm91bmQtY29sb3I6ICR7Y29sb3JzUmF3LnJlZExpZ2h0fTtcbiAgICBjb2xvcjogJHtjb2xvcnNSYXcucmVkfTtcbiAgYCxcbiAgbGlnaHRCbHVlOiBjc3NgXG4gICAgYmFja2dyb3VuZC1jb2xvcjogJHtjb2xvcnNSYXcuYmx1ZUxpZ2h0fTtcbiAgICBjb2xvcjogJHtjb2xvcnNSYXcuYmx1ZX07XG4gIGAsXG4gIGxpZ2h0VGVhbDogY3NzYFxuICAgIGJhY2tncm91bmQtY29sb3I6ICR7Y29sb3JzUmF3LnRlYWxMaWdodH07XG4gICAgY29sb3I6ICMxMTk1YWE7XG4gIGAsXG4gIHRlYWw6IGNzc2BcbiAgICBiYWNrZ3JvdW5kLWNvbG9yOiAke2NvbG9yc1Jhdy50ZWFsfTtcbiAgICBjb2xvcjogJHtjb2xvcnNSYXcud2hpdGV9O1xuICBgLFxuICBkaXNhYmxlZDogY3NzYFxuICAgIGJhY2tncm91bmQtY29sb3I6ICR7Y29sb3JzUmF3LmdyYXlMaWdodH07XG4gICAgY29sb3I6ICR7Y29sb3JzUmF3LmdyYXl9O1xuICBgLFxufTtcblxuY29uc3QgY29tcG9uZW50cyA9IHtcbiAgY2FyZCxcbiAgY2FyZXREb3duOiBjc3NgXG4gICAgY29sb3I6ICR7Y29sb3JzUmF3LndoaXRlfTtcbiAgICB3aWR0aDogMDtcbiAgICBoZWlnaHQ6IDA7XG4gICAgYm9yZGVyLWxlZnQ6IDVweCBzb2xpZCB0cmFuc3BhcmVudDtcbiAgICBib3JkZXItcmlnaHQ6IDVweCBzb2xpZCB0cmFuc3BhcmVudDtcbiAgICBib3JkZXItdG9wOiA2cHggc29saWQgY3VycmVudENvbG9yO1xuICAgIGJvcmRlci1yYWRpdXM6IDJweDtcbiAgYCxcbiAgYmFkZ2U6IGNzc2BcbiAgICAke2JhY2tncm91bmRCYWRnZX07XG4gICAgY29sb3I6ICR7Y29sb3JzLmluZm9UZXh0fTtcbiAgICBiYWNrZ3JvdW5kLWNvbG9yOiAke2NvbG9ycy5pbmZvQmFja2dyb3VuZH07XG4gIGAsXG4gIGJhZGdlU3VjY2VzczogY3NzYFxuICAgICR7YmFja2dyb3VuZEJhZGdlfTtcbiAgICBjb2xvcjogJHtjb2xvcnMuc3VjY2Vzc1RleHR9O1xuICAgIGJhY2tncm91bmQtY29sb3I6ICR7Y29sb3JzLnN1Y2Nlc3NCYWNrZ3JvdW5kfTtcbiAgYCxcbiAgYmFkZ2VEYW5nZXI6IGNzc2BcbiAgICAke2JhY2tncm91bmRCYWRnZX07XG4gICAgY29sb3I6ICR7Y29sb3JzUmF3LnJlZH07XG4gICAgYmFja2dyb3VuZC1jb2xvcjogI2ZiZTBkNztcbiAgYCxcbiAgdGV4dEJhZGdlOiBjc3NgXG4gICAgJHt0ZXh0QmFkZ2V9O1xuICAgIGNvbG9yOiAke2NvbG9ycy5pbmZvVGV4dH07XG4gIGAsXG4gIHRleHRCYWRnZVN1Y2Nlc3M6IGNzc2BcbiAgICAke3RleHRCYWRnZX07XG4gICAgY29sb3I6ICR7Y29sb3JzLnN1Y2Nlc3NUZXh0fTtcbiAgYCxcbiAgdGV4dEJhZGdlRGFuZ2VyOiBjc3NgXG4gICAgJHt0ZXh0QmFkZ2V9O1xuICAgIGNvbG9yOiAke2NvbG9yc1Jhdy5yZWR9O1xuICBgLFxuICBsb2FkZXJTaXplOiBjc3NgXG4gICAgd2lkdGg6IDIuMjg1NzE0MjlyZW07XG4gICAgaGVpZ2h0OiAyLjI4NTcxNDI5cmVtO1xuICBgLFxuICBjYXJkVG9wOiBjc3NgXG4gICAgJHtjYXJkfTtcbiAgICB3aWR0aDogJHtsZW5ndGhzLnRvcENhcmRXaWR0aH07XG4gICAgbWF4LXdpZHRoOiAxMDAlO1xuICAgIHBhZGRpbmc6IDE4cHggMjBweDtcbiAgICBtYXJnaW4tYm90dG9tOiAyOHB4O1xuICBgLFxuICBjYXJkVG9wSGVhZGluZzogY3NzYFxuICAgIGZvbnQtc2l6ZTogMjJweDtcbiAgICBmb250LXdlaWdodDogNjAwO1xuICAgIGxpbmUtaGVpZ2h0OiAzN3B4O1xuICAgIG1hcmdpbjogMDtcbiAgICBwYWRkaW5nOiAwO1xuICBgLFxuICBjYXJkVG9wRGVzY3JpcHRpb246IGNzc2BcbiAgICBtYXgtd2lkdGg6IDQ4MHB4O1xuICAgIGNvbG9yOiAke2NvbG9ycy50ZXh0fTtcbiAgICBmb250LXNpemU6IDE0cHg7XG4gICAgbWFyZ2luLXRvcDogOHB4O1xuICBgLFxuICBvYmplY3RXaWRnZXRUb3BCYXJDb250YWluZXI6IGNzc2BcbiAgICBwYWRkaW5nOiAke2xlbmd0aHMub2JqZWN0V2lkZ2V0VG9wQmFyQ29udGFpbmVyUGFkZGluZ307XG4gIGAsXG4gIGRyb3Bkb3duTGlzdDogY3NzYFxuICAgICR7c2hhZG93cy5kcm9wRGVlcH07XG4gICAgYmFja2dyb3VuZC1jb2xvcjogJHtjb2xvcnNSYXcud2hpdGV9O1xuICAgIGJvcmRlci1yYWRpdXM6ICR7bGVuZ3Rocy5ib3JkZXJSYWRpdXN9O1xuICAgIG92ZXJmbG93OiBoaWRkZW47XG4gIGAsXG4gIGRyb3Bkb3duSXRlbTogY3NzYFxuICAgICR7YnV0dG9ucy5idXR0b259O1xuICAgIGJhY2tncm91bmQtY29sb3I6IHRyYW5zcGFyZW50O1xuICAgIGJvcmRlci1yYWRpdXM6IDA7XG4gICAgY29sb3I6ICR7Y29sb3JzUmF3LmdyYXl9O1xuICAgIGZvbnQtd2VpZ2h0OiA1MDA7XG4gICAgYm9yZGVyLWJvdHRvbTogMXB4IHNvbGlkICNlYWViZjE7XG4gICAgcGFkZGluZzogMTBweCAxNHB4O1xuICAgIGRpc3BsYXk6IGZsZXg7XG4gICAganVzdGlmeS1jb250ZW50OiBzcGFjZS1iZXR3ZWVuO1xuICAgIGFsaWduLWl0ZW1zOiBjZW50ZXI7XG5cbiAgICAmOmxhc3Qtb2YtdHlwZSB7XG4gICAgICBib3JkZXItYm90dG9tOiAwO1xuICAgIH1cblxuICAgICY6aG92ZXIsXG4gICAgJjphY3RpdmUsXG4gICAgJjpmb2N1cyB7XG4gICAgICBjb2xvcjogJHtjb2xvcnMuYWN0aXZlfTtcbiAgICAgIGJhY2tncm91bmQtY29sb3I6ICR7Y29sb3JzLmFjdGl2ZUJhY2tncm91bmR9O1xuICAgIH1cbiAgYCxcbn07XG5cbmNvbnN0IHJlYWN0U2VsZWN0U3R5bGVzID0ge1xuICBjb250cm9sOiBzdHlsZXMgPT4gKHtcbiAgICAuLi5zdHlsZXMsXG4gICAgYm9yZGVyOiAwLFxuICAgIGJveFNoYWRvdzogJ25vbmUnLFxuICAgIHBhZGRpbmc6ICc5cHggMCA5cHggMTJweCcsXG4gIH0pLFxuICBvcHRpb246IChzdHlsZXMsIHN0YXRlKSA9PiAoe1xuICAgIC4uLnN0eWxlcyxcbiAgICBiYWNrZ3JvdW5kQ29sb3I6IHN0YXRlLmlzU2VsZWN0ZWRcbiAgICAgID8gYCR7Y29sb3JzLmFjdGl2ZX1gXG4gICAgICA6IHN0YXRlLmlzRm9jdXNlZFxuICAgICAgPyBgJHtjb2xvcnMuYWN0aXZlQmFja2dyb3VuZH1gXG4gICAgICA6ICd0cmFuc3BhcmVudCcsXG4gICAgcGFkZGluZ0xlZnQ6ICcyMnB4JyxcbiAgfSksXG4gIG1lbnU6IHN0eWxlcyA9PiAoeyAuLi5zdHlsZXMsIHJpZ2h0OiAwLCB6SW5kZXg6IDIgfSksXG4gIGNvbnRhaW5lcjogc3R5bGVzID0+ICh7IC4uLnN0eWxlcywgcGFkZGluZzogJzAgIWltcG9ydGFudCcgfSksXG4gIGluZGljYXRvclNlcGFyYXRvcjogKHN0eWxlcywgc3RhdGUpID0+XG4gICAgc3RhdGUuaGFzVmFsdWUgJiYgc3RhdGUuc2VsZWN0UHJvcHMuaXNDbGVhcmFibGVcbiAgICAgID8geyAuLi5zdHlsZXMsIGJhY2tncm91bmRDb2xvcjogYCR7Y29sb3JzLnRleHRGaWVsZEJvcmRlcn1gIH1cbiAgICAgIDogeyBkaXNwbGF5OiAnbm9uZScgfSxcbiAgZHJvcGRvd25JbmRpY2F0b3I6IHN0eWxlcyA9PiAoeyAuLi5zdHlsZXMsIGNvbG9yOiBgJHtjb2xvcnMuY29udHJvbExhYmVsfWAgfSksXG4gIGNsZWFySW5kaWNhdG9yOiBzdHlsZXMgPT4gKHsgLi4uc3R5bGVzLCBjb2xvcjogYCR7Y29sb3JzLmNvbnRyb2xMYWJlbH1gIH0pLFxuICBtdWx0aVZhbHVlOiBzdHlsZXMgPT4gKHtcbiAgICAuLi5zdHlsZXMsXG4gICAgYmFja2dyb3VuZENvbG9yOiBjb2xvcnMuYmFja2dyb3VuZCxcbiAgfSksXG4gIG11bHRpVmFsdWVMYWJlbDogc3R5bGVzID0+ICh7XG4gICAgLi4uc3R5bGVzLFxuICAgIGNvbG9yOiBjb2xvcnMudGV4dExlYWQsXG4gICAgZm9udFdlaWdodDogNTAwLFxuICB9KSxcbiAgbXVsdGlWYWx1ZVJlbW92ZTogc3R5bGVzID0+ICh7XG4gICAgLi4uc3R5bGVzLFxuICAgIGNvbG9yOiBjb2xvcnMuY29udHJvbExhYmVsLFxuICAgICc6aG92ZXInOiB7XG4gICAgICBjb2xvcjogY29sb3JzLmVycm9yVGV4dCxcbiAgICAgIGJhY2tncm91bmRDb2xvcjogY29sb3JzLmVycm9yQmFja2dyb3VuZCxcbiAgICB9LFxuICB9KSxcbn07XG5cbmNvbnN0IEdsb2JhbFN0eWxlcyA9ICgpID0+IChcbiAgPEdsb2JhbFxuICAgIHN0eWxlcz17Y3NzYFxuICAgICAgKixcbiAgICAgICo6YmVmb3JlLFxuICAgICAgKjphZnRlciB7XG4gICAgICAgIGJveC1zaXppbmc6IGJvcmRlci1ib3g7XG4gICAgICB9XG5cbiAgICAgIDpmb2N1cyB7XG4gICAgICAgIG91dGxpbmU6IC13ZWJraXQtZm9jdXMtcmluZy1jb2xvciBhdXRvICR7bGVuZ3Rocy5ib3JkZXJSYWRpdXN9O1xuICAgICAgfVxuXG4gICAgICAvKipcbiAgICAgICAqIERvbid0IHNob3cgb3V0bGluZXMgaWYgdGhlIHVzZXIgaXMgdXRpbGl6aW5nIG1vdXNlIHJhdGhlciB0aGFuIGtleWJvYXJkLlxuICAgICAgICovXG4gICAgICBbZGF0YS13aGF0aW50ZW50PSdtb3VzZSddICo6Zm9jdXMge1xuICAgICAgICBvdXRsaW5lOiBub25lO1xuICAgICAgfVxuXG4gICAgICBpbnB1dCB7XG4gICAgICAgIGJvcmRlcjogMDtcbiAgICAgIH1cblxuICAgICAgYm9keSB7XG4gICAgICAgIGZvbnQtZmFtaWx5OiAke2ZvbnRzLnByaW1hcnl9O1xuICAgICAgICBmb250LXdlaWdodDogbm9ybWFsO1xuICAgICAgICBiYWNrZ3JvdW5kLWNvbG9yOiAke2NvbG9ycy5iYWNrZ3JvdW5kfTtcbiAgICAgICAgY29sb3I6ICR7Y29sb3JzLnRleHR9O1xuICAgICAgICBtYXJnaW46IDA7XG4gICAgICB9XG5cbiAgICAgIHVsLFxuICAgICAgb2wge1xuICAgICAgICBwYWRkaW5nLWxlZnQ6IDA7XG4gICAgICB9XG5cbiAgICAgIGgxLFxuICAgICAgaDIsXG4gICAgICBoMyxcbiAgICAgIGg0LFxuICAgICAgaDUsXG4gICAgICBoNixcbiAgICAgIHAge1xuICAgICAgICBmb250LWZhbWlseTogJHtmb250cy5wcmltYXJ5fTtcbiAgICAgICAgY29sb3I6ICR7Y29sb3JzLnRleHRMZWFkfTtcbiAgICAgICAgZm9udC1zaXplOiAxNXB4O1xuICAgICAgICBsaW5lLWhlaWdodDogMS41O1xuICAgICAgICBtYXJnaW4tdG9wOiAwO1xuICAgICAgfVxuXG4gICAgICBoMSxcbiAgICAgIGgyLFxuICAgICAgaDMsXG4gICAgICBoNCxcbiAgICAgIGg1LFxuICAgICAgaDYge1xuICAgICAgICBmb250LXdlaWdodDogNTAwO1xuICAgICAgfVxuXG4gICAgICBoMSB7XG4gICAgICAgIGZvbnQtc2l6ZTogMjRweDtcbiAgICAgICAgbGV0dGVyLXNwYWNpbmc6IDAuNHB4O1xuICAgICAgICBjb2xvcjogJHtjb2xvcnMudGV4dExlYWR9O1xuICAgICAgfVxuXG4gICAgICBhLFxuICAgICAgYnV0dG9uIHtcbiAgICAgICAgZm9udC1zaXplOiAxNHB4O1xuICAgICAgICBmb250LXdlaWdodDogNTAwO1xuICAgICAgfVxuXG4gICAgICBhIHtcbiAgICAgICAgY29sb3I6ICR7Y29sb3JzLnRleHR9O1xuICAgICAgICB0ZXh0LWRlY29yYXRpb246IG5vbmU7XG4gICAgICB9XG5cbiAgICAgIGltZyB7XG4gICAgICAgIG1heC13aWR0aDogMTAwJTtcbiAgICAgIH1cblxuICAgICAgdGV4dGFyZWEge1xuICAgICAgICByZXNpemU6IG5vbmU7XG4gICAgICB9XG4gICAgYH1cbiAgLz5cbik7XG5cbmV4cG9ydCB7XG4gIGZvbnRzLFxuICBjb2xvcnNSYXcsXG4gIGNvbG9ycyxcbiAgbGVuZ3RocyxcbiAgY29tcG9uZW50cyxcbiAgYnV0dG9ucyxcbiAgc2hhZG93cyxcbiAgYm9yZGVycyxcbiAgdHJhbnNpdGlvbnMsXG4gIGVmZmVjdHMsXG4gIHJlYWN0U2VsZWN0U3R5bGVzLFxuICBHbG9iYWxTdHlsZXMsXG59O1xuIl19 */"))
};
exports.buttons = buttons;
const components = {
  card,
  caretDown:
  /*#__PURE__*/
  (0, _core.css)("color:", colorsRaw.white, ";width:0;height:0;border-left:5px solid transparent;border-right:5px solid transparent;border-top:6px solid currentColor;border-radius:2px;label:caretDown;" + (process.env.NODE_ENV === "production" ? "" : "/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */")),
  badge:
  /*#__PURE__*/
  (0, _core.css)(backgroundBadge, ";color:", colors.infoText, ";background-color:", colors.infoBackground, ";label:badge;" + (process.env.NODE_ENV === "production" ? "" : "/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */")),
  badgeSuccess:
  /*#__PURE__*/
  (0, _core.css)(backgroundBadge, ";color:", colors.successText, ";background-color:", colors.successBackground, ";label:badgeSuccess;" + (process.env.NODE_ENV === "production" ? "" : "/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */")),
  badgeDanger:
  /*#__PURE__*/
  (0, _core.css)(backgroundBadge, ";color:", colorsRaw.red, ";background-color:#fbe0d7;label:badgeDanger;" + (process.env.NODE_ENV === "production" ? "" : "/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */")),
  textBadge:
  /*#__PURE__*/
  (0, _core.css)(textBadge, ";color:", colors.infoText, ";label:textBadge;" + (process.env.NODE_ENV === "production" ? "" : "/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */")),
  textBadgeSuccess:
  /*#__PURE__*/
  (0, _core.css)(textBadge, ";color:", colors.successText, ";label:textBadgeSuccess;" + (process.env.NODE_ENV === "production" ? "" : "/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */")),
  textBadgeDanger:
  /*#__PURE__*/
  (0, _core.css)(textBadge, ";color:", colorsRaw.red, ";label:textBadgeDanger;" + (process.env.NODE_ENV === "production" ? "" : "/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */")),
  loaderSize: process.env.NODE_ENV === "production" ? {
    name: "e7t4gf-loaderSize",
    styles: "width:2.28571429rem;height:2.28571429rem;label:loaderSize;"
  } : {
    name: "e7t4gf-loaderSize",
    styles: "width:2.28571429rem;height:2.28571429rem;label:loaderSize;",
    map: "/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */"
  },
  cardTop:
  /*#__PURE__*/
  (0, _core.css)(card, ";width:", lengths.topCardWidth, ";max-width:100%;padding:18px 20px;margin-bottom:28px;label:cardTop;" + (process.env.NODE_ENV === "production" ? "" : "/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */")),
  cardTopHeading: process.env.NODE_ENV === "production" ? {
    name: "1jf7yv6-cardTopHeading",
    styles: "font-size:22px;font-weight:600;line-height:37px;margin:0;padding:0;label:cardTopHeading;"
  } : {
    name: "1jf7yv6-cardTopHeading",
    styles: "font-size:22px;font-weight:600;line-height:37px;margin:0;padding:0;label:cardTopHeading;",
    map: "/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */"
  },
  cardTopDescription:
  /*#__PURE__*/
  (0, _core.css)("max-width:480px;color:", colors.text, ";font-size:14px;margin-top:8px;label:cardTopDescription;" + (process.env.NODE_ENV === "production" ? "" : "/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */")),
  objectWidgetTopBarContainer:
  /*#__PURE__*/
  (0, _core.css)("padding:", lengths.objectWidgetTopBarContainerPadding, ";label:objectWidgetTopBarContainer;" + (process.env.NODE_ENV === "production" ? "" : "/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */")),
  dropdownList:
  /*#__PURE__*/
  (0, _core.css)(shadows.dropDeep, ";background-color:", colorsRaw.white, ";border-radius:", lengths.borderRadius, ";overflow:hidden;label:dropdownList;" + (process.env.NODE_ENV === "production" ? "" : "/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */")),
  dropdownItem:
  /*#__PURE__*/
  (0, _core.css)(buttons.button, ";background-color:transparent;border-radius:0;color:", colorsRaw.gray, ";font-weight:500;border-bottom:1px solid #eaebf1;padding:10px 14px;display:flex;justify-content:space-between;align-items:center;&:last-of-type{border-bottom:0;}&:hover,&:active,&:focus{color:", colors.active, ";background-color:", colors.activeBackground, ";}label:dropdownItem;" + (process.env.NODE_ENV === "production" ? "" : "/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */"))
};
exports.components = components;
const reactSelectStyles = {
  control: styles => _objectSpread({}, styles, {
    border: 0,
    boxShadow: 'none',
    padding: '9px 0 9px 12px'
  }),
  option: (styles, state) => _objectSpread({}, styles, {
    backgroundColor: state.isSelected ? `${colors.active}` : state.isFocused ? `${colors.activeBackground}` : 'transparent',
    paddingLeft: '22px'
  }),
  menu: styles => _objectSpread({}, styles, {
    right: 0,
    zIndex: 2
  }),
  container: styles => _objectSpread({}, styles, {
    padding: '0 !important'
  }),
  indicatorSeparator: (styles, state) => state.hasValue && state.selectProps.isClearable ? _objectSpread({}, styles, {
    backgroundColor: `${colors.textFieldBorder}`
  }) : {
    display: 'none'
  },
  dropdownIndicator: styles => _objectSpread({}, styles, {
    color: `${colors.controlLabel}`
  }),
  clearIndicator: styles => _objectSpread({}, styles, {
    color: `${colors.controlLabel}`
  }),
  multiValue: styles => _objectSpread({}, styles, {
    backgroundColor: colors.background
  }),
  multiValueLabel: styles => _objectSpread({}, styles, {
    color: colors.textLead,
    fontWeight: 500
  }),
  multiValueRemove: styles => _objectSpread({}, styles, {
    color: colors.controlLabel,
    ':hover': {
      color: colors.errorText,
      backgroundColor: colors.errorBackground
    }
  })
};
exports.reactSelectStyles = reactSelectStyles;

const GlobalStyles = () => _react.default.createElement(_core.Global, {
  styles:
  /*#__PURE__*/
  (0, _core.css)("*,*:before,*:after{box-sizing:border-box;}:focus{outline:-webkit-focus-ring-color auto ", lengths.borderRadius, ";}[data-whatintent='mouse'] *:focus{outline:none;}input{border:0;}body{font-family:", fonts.primary, ";font-weight:normal;background-color:", colors.background, ";color:", colors.text, ";margin:0;}ul,ol{padding-left:0;}h1,h2,h3,h4,h5,h6,p{font-family:", fonts.primary, ";color:", colors.textLead, ";font-size:15px;line-height:1.5;margin-top:0;}h1,h2,h3,h4,h5,h6{font-weight:500;}h1{font-size:24px;letter-spacing:0.4px;color:", colors.textLead, ";}a,button{font-size:14px;font-weight:500;}a{color:", colors.text, ";text-decoration:none;}img{max-width:100%;}textarea{resize:none;}label:GlobalStyles;" + (process.env.NODE_ENV === "production" ? "" : "/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */"))
});

exports.GlobalStyles = GlobalStyles;